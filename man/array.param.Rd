% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/params.R
\name{array.param}
\alias{array.param}
\title{array.param}
\usage{
array.param(..., prototype, start = 1, min = 0, max = Inf)
}
\arguments{
\item{...}{Passed through to \code{\link{simple.param}}. This includes at least "name", optionally "label" and "description".
but not "type" (which is set to "array") or "value" (which is set to empty string, but ignored anyway, since the
prototype parameter will have its own value).}

\item{prototype}{A single AnalysisPageParam that is the prototype for each of the elements in the array. Note
that while only one param is allowed, it could potentially be either a compound or another array parameter.}

\item{start}{The starting length of the array that should be rendered}

\item{min}{The minimum allowed length of the array. Buttons to remove elements should be de-activated below this level (default 0).}

\item{max}{The maximum allowed length of the array. Buttons to add elements should be de-activated above this level (default Inf).}
}
\value{
AnalysisPageParam of type "array"
}
\description{
Create an Array AnalysisPageParam
}
\details{
An array AnalysisPageParam is a way of having a single parameter with
multiple repetitions of some other (fixed) parameter type. The
starting length, as well as minimum and maximum allowable lengths,
are provided. If min != max then the front end should render some
widget to add/remove elements.

By combining with \code{compound.param} a fairly complex data
structure can now be specified.
}
\examples{
  one.gene <- simple.param(name="gene", label="Gene Symbol")
  gene.set <- array.param(name="geneset", prototype=one.gene)
}
\author{
Brad Friedman
}

