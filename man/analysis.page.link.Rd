% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/links.R
\name{analysis.page.link}
\alias{analysis.page.link}
\title{app.link}
\usage{
analysis.page.link(page, params = list(), submit = TRUE, relative = "")
}
\arguments{
\item{page}{\code{AnalysisPage} object. The name will be extracted from this object and its AnalysisPageParamSet will be used to
validate the \code{params} argument. Or, you can provide a character string. Then you won't get the parameter value checking for
free but you will get the page name.}

\item{params}{Named list of parameter values. If \code{page} is an \code{AnalysisPage} then they will be validated using the
parameter set of that page.}

\item{submit}{If submit is true then turn on a flag that says that the analysis should be submitted. Otherwise the link will
open the primary parameter area. It is an error to supply params if submit = FALSE (this may be allowed in the future, but right
now it is not supported.). Default: TRUE}

\item{relative}{String. This string will be prepended to the relative URL beginning with "?". Default
is empty string, so you would get something like "#page/2way/...". If you gave, for example
"http://research.gene.com/expressionplot/app.html" then you would get "http://research.gene.com/expressionplot/app.html#page/2way/...".
In RApache context the Global variable SERVER$headers_in$Referer is very useful for this.}
}
\value{
A relative URL beginning with "#", or a full URL if \code{relative} is provide
}
\description{
Link into the app in a particular state
}
\details{
It is possible to encode the application state into a URL which will then be executed
by the front end. There are 2 parts to the state, and each is supplied as one
argument to this function (which then becomes one URL-encoded parameter in the link)

\describe{
  \item{"page"}{The name of the page within the app, such as "2way"}
  \item{"params"}{A subset of parameters and their values, already filled out}
}
}
\examples{
analysis.page.link("mypage", params=list(foo=1))
}
\author{
Brad Friedman
}

