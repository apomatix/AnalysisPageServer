% Generated by roxygen2 (4.0.2): do not edit by hand
\name{protect.rapache.memory}
\alias{protect.rapache.memory}
\title{protect.rapache.memory}
\usage{
protect.rapache.memory(app, max.mb, app.event = "FinishAnalysis",
  memory.event = "BloatedMemory")
}
\arguments{
\item{app}{AnalysisPageRApacheApp}

\item{max.mb}{Maximum allowed memory usage before triggering turnover.}

\item{app.event}{Name of event which should trigger this memory check.
Default: "FinishAnalysis".}

\item{memory.event}{Name of event which excess memory usage should trigger.
Default: "BloatedMemory".}
}
\value{
Nothing
}
\description{
Set up events and handler to turn over memory-bloated worker processes
}
\details{
Set up events and handler to turn over memory-bloated worker processes.
When Rapache processes process requests that require large amounts of memory
they don't return the memory to the OS. Eventually it can build up, slowing
down the server when then has to turn to cache. Calling this function
will add a check at each FinishAnalysis which, if the process is using
more memory than the threshold specified by \code{max.mb}, delivers
a SIGUSR1 signal to itself. This is a signal to Apache that the process
should be turned over after finish the current request, thus
pruning bloated workers.
}
\author{
Brad Friedman
}

