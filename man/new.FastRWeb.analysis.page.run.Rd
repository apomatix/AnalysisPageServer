% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/FastRWeb.analysis.page.server.R
\name{new.FastRWeb.analysis.page.run}
\alias{new.FastRWeb.analysis.page.run}
\title{new.FastRWeb.analysis.page.run}
\usage{
new.FastRWeb.analysis.page.run(app, FastRWeb.scriptname,
  FastRWeb.prefix = "/cgi-bin/R", APS.resources.location = "/R",
  front.end.location = "/dist-aps",
  front.end.dir = system.file("htdocs/client/dist-aps", package =
  "AnalysisPageServer"), tmpdir = tempdir(), FastRWeb.tmpdir = getwd(),
  referer = "", EP = NULL, REST.location = "/REST", verbose = FALSE,
  logger = create.logger(stderr(), if (verbose) log4r:::INFO else
  log4r:::FATAL), ...)
}
\arguments{
\item{app}{AnalysisPageRApacheApp. Or an AnalysisPageRegistry from which to build an app
(see \code{...}).}

\item{FastRWeb.scriptname}{Name for the app within FastRWeb. A script called \code{FastRWeb.R} would be
created, and the URL would be \code{FastRWeb.prefix/FastRWeb.scriptname}.}

\item{FastRWeb.prefix}{Prefix for all the FastRWeb resources on your server.
For example, if you are using a typical CGI
deployment, as described in the FastRWeb INSTALL document, it would be "/cgi-bin/R",
and your AnalysisPageServer app would be a group of URLs like /cgi-bin/R/APS/client/analysis-page-server.html etc
(but see \code{FastRWeb.scriptname} for \code{APS} and \code{front.end.location} for \code{client}).}

\item{APS.resources.location}{Location relative to App base URL from which to serve
dynamic AnalysisPageServer resources (like \code{analysis}, \code{pages}, and other details
that normal users don't have to worry about). Default, "R", is probably fine.}

\item{front.end.location}{Location relative to App base URL from which to serve
front end files. Default, "/client", is probably fine.}

\item{front.end.dir}{Path (in filesystem) to front end files. Default:
\code{system.file("htdocs", package = 'AnalysisPageServer')}}

\item{tmpdir}{Path to temporary directory to store files needed while the server is running. Default: \code{tempdir()}.
This is ignored if \code{app} is an \code{AnalysisPageRApacheApp}. This is a directory private (in the OOP sense,
not necessarily in the filesystem sense of the word "private") to the AnalysisPageServer system---FastRWeb never
sees it directly. This means in particular that it doesn't have to be within the AnalysisPageServer hierarchy.}

\item{FastRWeb.tmpdir}{This is the path to FastRWeb's tmpdir. FastRWeb will only serve temporary
files out of that directory.}

\item{referer}{FastRWeb does not (currently) parse the Referer from the headers,
but you can put a string here which will be interpreted as such. I only put this
here if you have an app which fails catastrophically if referer is unavaiable.}

\item{EP}{ExpressionPlotClient object, if needed for your app. Deprecated, and to be removed in a future version.}

\item{REST.location}{If \code{EP} is non-NULL, then the location from which to serve
REST requests (relative to app base URL). Default: "/REST". Deprecated, and to be removed in a future version.}

\item{verbose}{Boolean, default FALSE. If TRUE then send progress messages.}

\item{logger}{log4r object, optional}

\item{...}{If \code{app} is actually an AnalysisPageRegistry then \code{...} is passed through
h it to \code{rapache.app.from.registry} to build the \code{AnalysisPageRApacheApp}.
just a convenient}
}
\value{
Not sure yet....
}
\description{
Given an RApacheAnalysisPageServer object, create a FastRWeb-compatible handler
}
\details{
FastRWeb is another alternative for deployment of AnalysisPageServer applications.
The benefit relative to Apache/RApache is that it may be easier to deploy. The
benefit relative to Rook/Rhttpd is that it actually works (Rhttpd cannot handle
concurrent connections). See \code{http://rforge.net/FastRWeb/} (and \code{http://rforge.net/Rserve/}) for information
about the FastRWeb/Rserve system. This function assumes that you've already got
a working installation of Rserve and fastRWeb, as described there.
As with that example, FastRWeb is a layer between Rserve and either CGI or PHP, so you
would also have to have a CGI or PHP server running. Or, you could try the experimental
http server that comes starting in Rserve 1.7.

This function, \code{new.FastRWeb.analysis.page.run} returns a function which can be used as the
\code{run} function for a FastRWeb
script. So, typically, your FastRWeb script would do whatever necessary to create your
AnalysisPageServer Registry (or App object). Then, the last line of the script
would be to pass that object to this function, and assign the return value to \code{run}.
In other words, this function would not normally be called interactively, but only
within the FastRWeb framework.

For development purposes it is quite convenient to build your AnalysisPageServer application
within the FastRWeb script. For example, in the default configuration,
you could put this into "/var/FastRWeb/web.R/APS.R":

\code{
  library(AnalysisPageServer)
  reg <- trig.registry()
  run <- new.FastRWeb.analysis.page.run(reg, FastRWeb.scriptname = "APS")
}

This allows you to make changes to code and reload the page without restarting the server.
In fact, any libraries will be reloaded, so you can change your package and re-install without
restarting the server.

Once you want to move more into testing or production you'll want to do all the heavy
lifting in the startup script. You would have to save the \code{run} object somewhere in the Global
namespace and then simply return in in the FastRWeb script. Under default FastRWeb configuration
you could add this code to the end of the startup script "/var/FastRWeb/code/rserve.R":

\code{
  library(AnalysisPageServer)
  myRun <- new.FastRWeb.analysis.page.run(trig.registry(), FastRWeb.scriptname = "APS")
}

Then, in "/var/FastRWeb/web.R/APS.R", you could just have nothing more than this:

\code{
  run <- myRun
}

Note that the name of the FastRWeb script must be the same as \code{FastRWeb.scriptname}, but
with a ".R" suffix appended.

It would be possible to extend this system to server multiple AnalysisPageServer apps from the
same FastRWeb setup. Each one would get its own FastRWeb script, and I leave it as an exercise
for the reader to build them all in the Rserve startup and assign the correct handler
to \code{run} in each script.

In this example I point my browser to \code{http://localhost/cgi-bin/R/APS/dist-aps/analysis-page-server.html}
to open the page.
}
\examples{
\dontrun{
  library(AnalysisPageServer)
  reg <- trig.registry()
  run <- new.FastRWeb.analysis.page.run(reg)
}
message("See vignette FastRWebDeployment.html")
}
\author{
Brad Friedman
}

